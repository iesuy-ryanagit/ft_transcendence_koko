services:
  account:
    build: ./account
    container_name: account
    networks:
      - app-network
    volumes:
      - ./account:/app
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,frontend,db
  backendgame:
    build: ./backendgame
    container_name: backendgame
    networks:
      - app-network
    volumes:
      - ./backendgame:/app
    ports:
      - "8001:8001"
    env_file: .env
    environment:
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,frontend,db
  backendtournament:
    build: ./backendtournament
    container_name: backendtournament
    networks:
      - app-network
    volumes:
      - ./backendtournament:/app
    ports:
      - "8002:8002"
    env_file: .env
    environment:
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,frontend,db
#   db:
#     build:
#       context: ./db
#     container_name: db
#     networks:
#       - app-network
#     env_file: .env
#     volumes:
#       - ./data/db:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
#       interval: 1s
#       timeout: 5s
#       retries: 10
#       start_period: 5s

  frontend:
    build: ./frontend
    container_name: frontend
    env_file: .env
    networks:
      - app-network
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"

  nginx:
    image: nginx:alpine
    container_name: nginx
    build: ./nginx
    networks:
      - app-network
    env_file: .env
    volumes:
      - ./nginx:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - account

networks:
  app-network:
    driver: bridge

